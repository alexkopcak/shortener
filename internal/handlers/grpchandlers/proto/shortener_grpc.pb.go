// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: shortener.proto

package shortener_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShortenerClient is the client API for Shortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerClient interface {
	// Get token value
	Login(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Token, error)
	// Obtains OriginalURL for ShortURL value
	GetURL(ctx context.Context, in *URLRequest, opts ...grpc.CallOption) (*URLResponse, error)
	// Obtains all URLs saved by the user in the format of pairs of OriginURL and ShortURL
	GetAllURL(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AnyURLResponse, error)
	// Obtain ShortURL value for OriginalURL and save it at storage
	PostURL(ctx context.Context, in *URLRequest, opts ...grpc.CallOption) (*URLResponse, error)
	// Obtain ShortURL value for OriginalURL and save it at storage
	PostAPIurl(ctx context.Context, in *URLRequest, opts ...grpc.CallOption) (*URLResponse, error)
	// Obtain ShortURL values for OriginalURL at batch request and save values at storage
	PostAPIBatch(ctx context.Context, in *BatchRequestArray, opts ...grpc.CallOption) (*BatchResponseArray, error)
	// Delete stored URL values by ShortURL
	DeleteURLs(ctx context.Context, in *AnyURLRequest, opts ...grpc.CallOption) (*Empty, error)
	// Generate Internal Stats get URLs and Users count
	GetInternalStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InternalStatsResponse, error)
}

type shortenerClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerClient(cc grpc.ClientConnInterface) ShortenerClient {
	return &shortenerClient{cc}
}

func (c *shortenerClient) Login(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/shortener.grpc.Shortener/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetURL(ctx context.Context, in *URLRequest, opts ...grpc.CallOption) (*URLResponse, error) {
	out := new(URLResponse)
	err := c.cc.Invoke(ctx, "/shortener.grpc.Shortener/GetURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetAllURL(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AnyURLResponse, error) {
	out := new(AnyURLResponse)
	err := c.cc.Invoke(ctx, "/shortener.grpc.Shortener/GetAllURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) PostURL(ctx context.Context, in *URLRequest, opts ...grpc.CallOption) (*URLResponse, error) {
	out := new(URLResponse)
	err := c.cc.Invoke(ctx, "/shortener.grpc.Shortener/PostURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) PostAPIurl(ctx context.Context, in *URLRequest, opts ...grpc.CallOption) (*URLResponse, error) {
	out := new(URLResponse)
	err := c.cc.Invoke(ctx, "/shortener.grpc.Shortener/PostAPIurl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) PostAPIBatch(ctx context.Context, in *BatchRequestArray, opts ...grpc.CallOption) (*BatchResponseArray, error) {
	out := new(BatchResponseArray)
	err := c.cc.Invoke(ctx, "/shortener.grpc.Shortener/PostAPIBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) DeleteURLs(ctx context.Context, in *AnyURLRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/shortener.grpc.Shortener/DeleteURLs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetInternalStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InternalStatsResponse, error) {
	out := new(InternalStatsResponse)
	err := c.cc.Invoke(ctx, "/shortener.grpc.Shortener/GetInternalStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerServer is the server API for Shortener service.
// All implementations must embed UnimplementedShortenerServer
// for forward compatibility
type ShortenerServer interface {
	// Get token value
	Login(context.Context, *Empty) (*Token, error)
	// Obtains OriginalURL for ShortURL value
	GetURL(context.Context, *URLRequest) (*URLResponse, error)
	// Obtains all URLs saved by the user in the format of pairs of OriginURL and ShortURL
	GetAllURL(context.Context, *Empty) (*AnyURLResponse, error)
	// Obtain ShortURL value for OriginalURL and save it at storage
	PostURL(context.Context, *URLRequest) (*URLResponse, error)
	// Obtain ShortURL value for OriginalURL and save it at storage
	PostAPIurl(context.Context, *URLRequest) (*URLResponse, error)
	// Obtain ShortURL values for OriginalURL at batch request and save values at storage
	PostAPIBatch(context.Context, *BatchRequestArray) (*BatchResponseArray, error)
	// Delete stored URL values by ShortURL
	DeleteURLs(context.Context, *AnyURLRequest) (*Empty, error)
	// Generate Internal Stats get URLs and Users count
	GetInternalStats(context.Context, *Empty) (*InternalStatsResponse, error)
	mustEmbedUnimplementedShortenerServer()
}

// UnimplementedShortenerServer must be embedded to have forward compatible implementations.
type UnimplementedShortenerServer struct {
}

func (UnimplementedShortenerServer) Login(context.Context, *Empty) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedShortenerServer) GetURL(context.Context, *URLRequest) (*URLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURL not implemented")
}
func (UnimplementedShortenerServer) GetAllURL(context.Context, *Empty) (*AnyURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllURL not implemented")
}
func (UnimplementedShortenerServer) PostURL(context.Context, *URLRequest) (*URLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostURL not implemented")
}
func (UnimplementedShortenerServer) PostAPIurl(context.Context, *URLRequest) (*URLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAPIurl not implemented")
}
func (UnimplementedShortenerServer) PostAPIBatch(context.Context, *BatchRequestArray) (*BatchResponseArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAPIBatch not implemented")
}
func (UnimplementedShortenerServer) DeleteURLs(context.Context, *AnyURLRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteURLs not implemented")
}
func (UnimplementedShortenerServer) GetInternalStats(context.Context, *Empty) (*InternalStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInternalStats not implemented")
}
func (UnimplementedShortenerServer) mustEmbedUnimplementedShortenerServer() {}

// UnsafeShortenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerServer will
// result in compilation errors.
type UnsafeShortenerServer interface {
	mustEmbedUnimplementedShortenerServer()
}

func RegisterShortenerServer(s grpc.ServiceRegistrar, srv ShortenerServer) {
	s.RegisterService(&Shortener_ServiceDesc, srv)
}

func _Shortener_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.grpc.Shortener/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).Login(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.grpc.Shortener/GetURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetURL(ctx, req.(*URLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetAllURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetAllURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.grpc.Shortener/GetAllURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetAllURL(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_PostURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).PostURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.grpc.Shortener/PostURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).PostURL(ctx, req.(*URLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_PostAPIurl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).PostAPIurl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.grpc.Shortener/PostAPIurl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).PostAPIurl(ctx, req.(*URLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_PostAPIBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequestArray)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).PostAPIBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.grpc.Shortener/PostAPIBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).PostAPIBatch(ctx, req.(*BatchRequestArray))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_DeleteURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnyURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).DeleteURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.grpc.Shortener/DeleteURLs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).DeleteURLs(ctx, req.(*AnyURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetInternalStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetInternalStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.grpc.Shortener/GetInternalStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetInternalStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Shortener_ServiceDesc is the grpc.ServiceDesc for Shortener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shortener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortener.grpc.Shortener",
	HandlerType: (*ShortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Shortener_Login_Handler,
		},
		{
			MethodName: "GetURL",
			Handler:    _Shortener_GetURL_Handler,
		},
		{
			MethodName: "GetAllURL",
			Handler:    _Shortener_GetAllURL_Handler,
		},
		{
			MethodName: "PostURL",
			Handler:    _Shortener_PostURL_Handler,
		},
		{
			MethodName: "PostAPIurl",
			Handler:    _Shortener_PostAPIurl_Handler,
		},
		{
			MethodName: "PostAPIBatch",
			Handler:    _Shortener_PostAPIBatch_Handler,
		},
		{
			MethodName: "DeleteURLs",
			Handler:    _Shortener_DeleteURLs_Handler,
		},
		{
			MethodName: "GetInternalStats",
			Handler:    _Shortener_GetInternalStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shortener.proto",
}
